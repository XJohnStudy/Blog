[{"title":"Hexo博客插入图片","date":"2019-10-12T08:11:58.000Z","path":"2019/10/12/img-test/","text":"Hexo博客插入图片1.本地引用绝对路径 ​ 当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。对于source/images/image.jpg这张图片可以用以下语法访问到 / 优点：图片既可以在首页内容中访问到，也可以在文章正文中访问到。 注：经调试，此种方法在本地调试和部署后都能正常显示图片。 相对路径 ​ 图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客根目录下的_config.yml来生成。 1post_asset_folder: true ​ 将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。_posts/post_name/image.jpg这张照片可以用以下方式访问： ​ 上述markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。 ​ 如果希望图片在文章和首页中同时显示，可以使用标签插件语法。_posts/post_name/image.jpg这张照片可以用以下方式访问： 注：通过测试，若直接按相对路径的两种方法设置，本地调试和部署后时，两种方法均不能显示图片，按照教程hexo引用本地图片无法显示修改hexo-asset-image插件，打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061'use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123; return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split('.');hexo.extend.filter.register('after_post_render', function(data)&#123; var config = hexo.config; if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, '/', 1) + 1; else var beginPos = getPosition(link, '/', 3) + 1; // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\". var endPos = link.lastIndexOf('/') + 1; link = link.substring(beginPos, endPos); var toprocess = ['excerpt', 'more', 'content']; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $('img').each(function()&#123; if ($(this).attr('src'))&#123; // For windows style path, we replace '\\' to '/'. var src = $(this).attr('src').replace('\\\\', '/'); if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp; !/^\\s*\\//.test(src)) &#123; // For \"about\" page, the first part of \"src\" can't be removed. // In addition, to support multi-level local directory. var linkArray = link.split('/').filter(function(elem)&#123; return elem != ''; &#125;); var srcArray = src.split('/').filter(function(elem)&#123; return elem != '' &amp;&amp; elem != '.'; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join('/'); $(this).attr('src', config.root + link + src); console.info&amp;&amp;console.info(\"update link as:--&gt;\"+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info(\"no src attr, skipped...\"); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125; &#125;&#125;); 修改代码后，在本地调试和部署后，第一种插入图片方式不能正常显示图片，第二种方式能正常显示图片。 原因：通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。因此第二种插入图片方式才是正确的 2.CDN引用​ 除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。因国内访问github速度较慢，所以将突破放到国内图床上，然后引用外链\b是常用的方法。常用图床总结：https://sspai.com/post/40499 图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。 当然，图床也是有缺点的，当所有人都把图片存在同一个图床上，万一有一天图床真挂了，那所有图片就都无法访问了，虽然这种情况的概率很低，但并不等于不会发生 目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。 微博图床（Chrome浏览器有个“新浪微博图床\u001d”插件，可以自动生成markdown链接）简单方便 七牛：\b需要注册且实名认证等太麻烦，放弃 腾讯云等云存储服务，需要先将照片放到云盘，然后找到超链接，然后\b粘贴到文章。太麻烦，放弃。 【强烈推荐！！！】ipic 工具，具体用法请谷歌，支持监控剪贴板，一键上传到微博图床，\b免费版默认是微博图床，支持七牛云等，下载地址: https://itunes.apple.com/cn/app/id1101244278?mt=12 注：此种方法未测试 3.使用GitHub​ 使用github存储博客图片 创建一个空的repo 然后将图片push到repo中 点击图片进去，有个download，右键复制链接 将链接插入文章 1![logo](https://github.com/xxxx/xx.jpg) 注：此种方法未测试 参考资料Hexo博客文章插入图片 hexo引用本地图片无法显示","tags":[]},{"title":"01_GitHub用法","date":"2019-10-12T03:44:23.000Z","path":"2019/10/12/GitHub用法/","text":"GitHub用法一、GitHub是什么？官方说法：GitHub是Git进行版本控制的软件源代码托管服务，它是世界上最大的代码存放网站和开源社区。 简单来说：GitHub是程序员放程序的地方，这里的放不仅指存放、放置，还有放开、共享的意思。 创始人：Git 是由 Linux 之父 Linus Tovalds 为了更好地管理linux内核开发而创立的分布式版本控制／软件配置管理软件。 二、基础使用方法第一步：打开官网：https://github.com 注册一个帐户。 第二步：创建仓库 填写仓库的名字和描述。 选中初始化 第三步：创建分支 ​ 创建好了之后，点击“Branch master”，创建分支——在文本框中输入分支名称和描述，然后点击蓝色部分确认。 第四步：点击创建一个新文件 输入想要提交的代码以及下方的文件名和描述后，点击最下方的Commit new file即可。 第五步：修改&amp;保存修改 ​ 在github上，提交&amp;保存修改的操作是commits。每一次的commit都会被记录，可以被其他用户查看。 点击铅笔图案即可修改，修改后点击Commit changes即可。 第六步：提交Pull request ​ Pull Requests是GitHub上合作的核心。当您打开拉取请求时，您提出了更改并请求某人审核并提取您的贡献并将其合并到他们的分支中。拉请求显示来自两个分支的内容的差异或差异。更改，添加和减少以绿色和红色显示。 提交后，即使在代码完成之前，您也可以打开拉取请求并开始讨论。 完成邮件后，单击“ 创建拉取请求”！ 第七步：合并修改历史 在最后一步中，是时候将您的更改结合在一起 - 将您的readme-edits分支合并到master分支中。 单击绿色合并拉取请求按钮以将更改合并到master。 单击确认合并。 继续删除分支，因为它的更改已合并，紫色框中的删除分支按钮。 总结：在教程中完成的内容： 创建了一个开源存储库 开始并管理一个新的分支 更改了文件并将这些更改提交给GitHub 打开并合并了一个Pull Request 三、参考资料官方教程 新手该如何使用GitHub？ GitHub 入门方法有哪些？ 如何使用 GitHub？ GitHub名词解释 联合项目开发GIThub使用 四、相关单词 repository n.仓库; 贮藏室; 存放处; 学识渊博的人; 智囊; 知识宝典; branch n.树枝; 分支; 分部; 分行; 分店; 政府部门; 分支机构;v.分开; 分岔; comments n.议论; 评论; 解释; 批评; 指责; pull request 拉取请求 populate your personal news feed 填充您个人的新闻提要 Issues n.重要议题; 争论的问题; (有关某事的) 问题，担忧; 一期; 期号; Marketplace n.市场竞争; 集市; 市场; GitHub Actions beta GitHub Actions测试版 collaborate v.合作; 协作; 通敌; 勾结敌人; a searchable and filterable list 可搜索可筛选的列表 No commit comments for this range 此范围没有提交注释 raw adj.生的; 未烹制的; 未煮的; 未经加工的; 自然状态的; 未经处理的; 未经分析的; 原始的;n.擦伤处; merge v.(使) 合并，结合，并入; 相融; 融入; 渐渐消失在某物中;","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://johnstudy.gitee.io/hexo-blog/tags/GitHub/"}]},{"title":"Hello World","date":"2019-10-12T01:38:16.924Z","path":"2019/10/12/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]